generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  //url               = env("DATABASE_URL_MIGRATE")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model tilemaps {
  id           String    @id @default(cuid())
  user_id      String
  user         User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  updated_at   DateTime? @default(now()) @db.Timestamptz(6)
  deleted      Boolean   @default(false)
  title        String?
  // data         Json?     @db.Json
  data_version Int?      @db.SmallInt
  data_string  String?
}

// next-js auth w/ prisma
// see: https://next-auth.js.org/adapters/prisma
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String     @id @default(cuid())
  name                String?
  email               String?    @unique
  emailVerified       DateTime?
  image               String?
  accounts            Account[]
  sessions            Session[]
  // custom_user         custom_user[]
  custom_access_token String     @default(cuid())
  tilemaps            tilemaps[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// model custom_user {
//   id     String @id @default(cuid())
//   userId String
//   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
//   token  String @default(cuid())
// }
